import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;

parser code
{:
  public CMathMathParser(java_cup.runtime.Scanner s, ConsoleController consoleController) {
    super(s);
    this.consoleController = consoleController;
  }

  @Override
  public void report_error(String message, Object info) {
    Symbol sym = (Symbol) info;
    int line = sym.left + 1;
    int col = sym.right + 1;
    consoleController.println(String.format("Error de sintaxis en la línea %d, columna %d (token: %s)", line, col, sym.value));
  }

  @Override
  public void report_fatal_error(String message, Object info) {
    consoleController.println("Error de sintaxis irrecuperable");
    throw new RuntimeException("Análisis sintáctico abortado por error de sintaxis irrecuperable");
  }

  public Complex assertComplexExpression(Expression e) {
    Object object = e.evaluate();

    if (!(object instanceof Complex))
      throw new IncorrectExpressionTypeException(object, ExpressionType.NUMBER);

    return (Complex) object;
  }

  public Set assertSetExpression(Expression e) {
    Object object = e.evaluate();

    if (!(object instanceof Set))
      throw new IncorrectExpressionTypeException(object, ExpressionType.SET);

    return (Set) object;
  }

  private Map<String, Object> variables = new HashMap<>();
  private ConsoleController consoleController;
:}

terminal double REAL, IMAGINARY, DEGREES;
terminal PLUS, MINUS, MULTIPLICATION, DIVISION, POW, ROUND;
terminal String PRINT, LEFT_PARENTH, RIGHT_PARENTH, DADO, SI, EQUIVALE,
  SINO, PEROSI, MIENTRAS, DESDE, CON, AVANZAR, TALQUE, CONJUNTO, PI,
  LEFT_BRACE, RIGHT_BRACE, ID, SIN, COS, TAN, SEC, CSC, COT, COMMA, EQUALS,
  UNION, INTERSECT, STRING;

non terminal codigo;
non terminal List<Instruction> instrucciones;
non terminal Instruction instruccion;
non terminal List<Instruction> bloque;
non terminal Expression expresion;
non terminal Expression expresionConjunto;
non terminal List<String> parametros;
non terminal List<Expression> listaExpresiones;
non terminal Expression expresionComplejo;

precedence left PLUS, MINUS;
precedence left MULTIPLICATION, DIVISION, POW, ROUND;
precedence left UNION, INTERSECT;

start with codigo;

codigo ::=
    instrucciones:ins
    {:
      for (Instruction in : ins)
      {
        try {
          in.run();
        }
        catch (Exception e) {
          consoleController.println("Error: " + e.getMessage());
        }
      }
    :}
;

instrucciones ::= 
    instruccion:in instrucciones:moreIns
    {:
      List<Instruction> instructions = new ArrayList<>();
      instructions.add(in);
      instructions.addAll(moreIns);
      RESULT = instructions;
    :}
  | instruccion:in
    {:
      List<Instruction> instructions = new ArrayList<>();
      instructions.add(in);
      RESULT = instructions;
    :}
  | error instrucciones:ins
    {:
      RESULT = ins;
    :}
;

bloque ::= 
    LEFT_BRACE instrucciones:ins RIGHT_BRACE
    {:
      RESULT = ins;
    :}
;

instruccion ::= 
    PRINT expresion:e
    {:
      RESULT = new PrintInstruction(e, consoleController);
    :}
  | PRINT STRING:s
    {:
      RESULT = new PrintInstruction(s, consoleController);
    :}
  | PRINT STRING:s expresion:e
    {:
      RESULT = new PrintInstruction(s, e, consoleController);
    :}
  | DADO ID:id TALQUE expresion:e
    {:
      RESULT = new DeclareInstruction(id, e, variables);
    :}
  | EQUIVALE ID:id EQUALS expresion:e
    {:
      RESULT = new DeclareInstruction(id, e, variables);
    :}
  | EQUIVALE ID:id PLUS EQUALS expresion:e
    {:
      RESULT = new AssignOpInstruction(id, e, variables, "+");
    :}
  | EQUIVALE ID:id MINUS EQUALS expresion:e
    {:
      RESULT = new AssignOpInstruction(id, e, variables, "-");
    :}
  | EQUIVALE ID:id MULTIPLICATION EQUALS expresion:e
    {:
      RESULT = new AssignOpInstruction(id, e, variables, "*");
    :}
  | EQUIVALE ID:id DIVISION EQUALS expresion:e
    {:
      RESULT = new AssignOpInstruction(id, e, variables, "/");
    :}
  | EQUIVALE ID:id POW EQUALS expresion:e
    {:
      RESULT = new AssignOpInstruction(id, e, variables, "^");
    :}
  | EQUIVALE ID:id PLUS PLUS
    {:
      RESULT = new IncrementInstruction(id, variables, 1);
    :}
  | EQUIVALE ID:id MINUS MINUS
    {:
      RESULT = new IncrementInstruction(id, variables, -1);
    :}
  | DESDE ID:id AVANZAR expresion:end CON expresion:step bloque:body
    {:
      RESULT = new IterationInstruction(id, end, step, body, variables);
    :}
;

expresion ::=
    ID:id
    {:
      RESULT = () -> {
        Object object = variables.get(id);
        
        if (object == null) {
          throw new RuntimeException("La variable '" + id + "' no está definida");
        }
        else {
          return object;
        }
      };
    :}
  | expresionConjunto:eConjunto
    {:
      RESULT = () -> eConjunto.evaluate();
    :}
  | expresionComplejo:eComplejo
    {:
      RESULT = () -> eComplejo.evaluate();
    :}
;

expresionConjunto ::=
    LEFT_BRACE listaExpresiones:le RIGHT_BRACE
    {:
      RESULT = () -> new Set(le);
    :}
  | expresion:e1 UNION expresion:e2
    {:
      RESULT = () -> {
        Set c1 = assertSetExpression(e1);
        Set c2 = assertSetExpression(e2);
        return c1.union(c2);
      };
    :}
  | expresion:e1 INTERSECT expresion:e2
    {:
      RESULT = () -> {
        Set c1 = assertSetExpression(e1);
        Set c2 = assertSetExpression(e2);
        return c1.intersect(c2);
      };
    :}
;

listaExpresiones ::=
    expresion:e
    {:
      List<Expression> expresiones = new ArrayList<>();
      expresiones.add(e);
      RESULT = expresiones;
    :}
  | expresion:e COMMA listaExpresiones:le
    {:
      List<Expression> expresiones = new ArrayList();
      expresiones.add(e);
      expresiones.addAll(le);
      RESULT = expresiones;
    :}
;

expresionComplejo ::= 
    REAL:r
    {:
      RESULT = () -> Complex.fromReal(r);
    :}
  | MINUS REAL:r
    {:
      RESULT = () -> Complex.fromReal(-r);
    :}
  | IMAGINARY:i
    {:
      RESULT = () -> Complex.fromImaginary(i);
    :}
  | DEGREES:d
    {:
      RESULT = () -> Complex.fromDegrees(d);
    :}
  | MINUS DEGREES:d
    {:
      RESULT = () -> Complex.fromDegrees(-d);
    :}
  | expresion:e1 PLUS expresion:e2
    {:
      RESULT = () ->
      {
        Complex c1 = assertComplexExpression(e1);
        Complex c2 = assertComplexExpression(e2);
        return c1.add(c2);
      };
    :}
  | expresion:e1 MINUS expresion:e2
    {:
      RESULT = () ->
      {
        Complex c1 = assertComplexExpression(e1);
        Complex c2 = assertComplexExpression(e2);
        return c1.substract(c2);
      };
    :}
  | expresion:e1 MULTIPLICATION expresion:e2
    {:
      RESULT = () ->
      {
        Complex c1 = assertComplexExpression(e1);
        Complex c2 = assertComplexExpression(e2);
        return c1.multiply(c2);
      };
    :}
  | LEFT_PARENTH expresion:e1 RIGHT_PARENTH LEFT_PARENTH expresion:e2 RIGHT_PARENTH
    {:
      RESULT = () ->
      {
        Complex c1 = assertComplexExpression(e1);
        Complex c2 = assertComplexExpression(e2);
        return c1.multiply(c2);
      };
    :}
  | expresion:e1 DIVISION expresion:e2
    {:
      RESULT = () ->
      {
        Complex c1 = assertComplexExpression(e1);
        Complex c2 = assertComplexExpression(e2);
        return c1.divide(c2);
      };
    :}
  | expresion:e1 POW expresion:e2
    {:
      RESULT = () ->
      {
        Complex c1 = assertComplexExpression(e1);
        Complex c2 = assertComplexExpression(e2);
        return c1.pow(c2);
      };
    :}
  | SIN LEFT_PARENTH expresion:e RIGHT_PARENTH
    {:
      RESULT = () ->
      {
        Complex c = assertComplexExpression(e);
        return c.sin();
      };
    :}
  | COS LEFT_PARENTH expresion:e RIGHT_PARENTH
    {:
      RESULT = () ->
      {
        Complex c = assertComplexExpression(e);
        return c.cos();
      };
    :}
  | TAN LEFT_PARENTH expresion:e RIGHT_PARENTH
    {:
      RESULT = () ->
      {
        Complex c = assertComplexExpression(e);
        return c.tan();
      };
    :}
  | SEC LEFT_PARENTH expresion:e RIGHT_PARENTH
    {:
      RESULT = () ->
      {
        Complex c = assertComplexExpression(e);
        return c.sec();
      };
    :}
  | CSC LEFT_PARENTH expresion:e RIGHT_PARENTH
    {:
      RESULT = () ->
      {
        Complex c = assertComplexExpression(e);
        return c.csc();
      };
    :}
  | COT LEFT_PARENTH expresion:e RIGHT_PARENTH
    {:
      RESULT = () ->
      {
        Complex c = assertComplexExpression(e);
        return c.cot();
      };
    :}
  | ROUND LEFT_PARENTH expresion:e RIGHT_PARENTH
    {:
      RESULT = () ->
      {
        Complex c = assertComplexExpression(e);
        return c.round();
      };
    :}
  | LEFT_PARENTH expresion:e RIGHT_PARENTH
    {:
      RESULT = () -> assertComplexExpression(e);
    :}
  | MINUS LEFT_PARENTH expresion:e RIGHT_PARENTH
    {:
      RESULT = () -> 
      {
        Complex c = assertComplexExpression(e);
        Complex minus = new Complex(-1, -1);
        return c.multiply(minus);
      };
    :}
  | REAL:r LEFT_PARENTH expresion:e RIGHT_PARENTH
    {:
      RESULT = () -> 
      {
        Complex c = assertComplexExpression(e);
        return c.multiply(r);
      };
    :}
;
