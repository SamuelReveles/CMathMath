import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;

parser code
{:
  /**
   * Method automatically called on syntax errors.
   */
  public void syntax_error(Symbol s) {
    System.out.println("Error sintáctico en la línea " + (s.left) + " Columna " + (s.right) + ". No se esperaba este componente: " + (s.value) + ".");
  }

  /**
   * Method automatically called on a critical syntax error after which
   * error recovery is impossible.
   */
  public void unrecoverable_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error sintáctico irrecuperable en la línea " + (s.left) + " Columna " + (s.right) + ". Componente " + (s.value) + " no reconocido.");
  }

  private Map<String, Complex> variables = new HashMap<>();
:}

terminal double REAL, IMAGINARY;
terminal PLUS, MINUS, MULTIPLICATION, DIVISION;
terminal String PRINT, LEFT_PARENTH, RIGHT_PARENTH, DADO, SI, EQUIVALE,
  SINO, PEROSI, F, MIENTRAS, DESDE, CON, AVANZAR, TALQUE, CONJUNTO, PI,
  LEFT_BRACE, RIGHT_BRACE, ID;

non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal bloque;
non terminal Complex expresion;

precedence left PLUS, MINUS;
precedence left MULTIPLICATION, DIVISION;

start with ini;

ini ::= instrucciones;

instrucciones ::= 
    instruccion instrucciones
  | instruccion
  | error instrucciones
;

bloque ::= 
    LEFT_BRACE instrucciones RIGHT_BRACE
;

instruccion ::= 
    PRINT expresion:e {: System.out.println(e); :}
;

instruccion ::= 
    DADO ID:id TALQUE expresion:e
    {: 
      variables.put(id, e); 
    :}
;

instruccion ::= 
    DESDE ID:id AVANZAR expresion:end CON expresion:step bloque:body
    {:
      Complex iterador = variables.get(id);
      if (iterador == null) {
        System.err.println("Variable iterador no declarada: " + id);
        iterador = Complex.fromReal(0);
      }

      Complex fin = end;
      Complex paso = step;

      if (iterador.isLessThan(fin)) {
        while (iterador.isLessThan(fin) || iterador.equals(fin)) {
          variables.put(id, iterador);
          System.out.println(iterador);
          iterador = iterador.add(paso);
        }
      } else {
        while (iterador.isGreaterThan(fin) || iterador.equals(fin)) {
          variables.put(id, iterador);
          System.out.println(iterador);
          iterador = iterador.substract(paso);
        }
      }
    :}
;

expresion ::= 
    REAL:r {: RESULT = Complex.fromReal(r); :}
  | IMAGINARY:i {: RESULT = Complex.fromImaginary(i); :}
  | ID:e {: RESULT = variables.get(e); :}
  | expresion:e1 PLUS expresion:e2 {: RESULT = e1.add(e2); :}
  | expresion:e1 MINUS expresion:e2 {: RESULT = e1.substract(e2); :}
  | expresion:e1 MULTIPLICATION expresion:e2 {: RESULT = e1.multiply(e2); :}
  | expresion:e1 DIVISION expresion:e2 {: RESULT = e1.divide(e2); :}
  | LEFT_PARENTH expresion:e RIGHT_PARENTH {: RESULT = e; :}
;
